#include <Wt/WApplication.h>
#include <Wt/WContainerWidget.h>
#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <iostream>
#include "WLeaflet.hh"
#include "parser.hh"

csv_parser* parser = nullptr;
std::string geojson_wards;

int load_dc311_simple();
int load_geojson();

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

class ApplicationMap : public Wt::WApplication
{
public:
  ApplicationMap(const Wt::WEnvironment& env);
  virtual ~ApplicationMap();

private:
  Wt::WLeaflet* map;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

ApplicationMap::ApplicationMap(const Wt::WEnvironment& env)
  : WApplication(env),
  map(root()->addNew<Wt::WLeaflet>())
{
  map->resize(1920, 1080);

}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ~ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

ApplicationMap::~ApplicationMap()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// create_application
/////////////////////////////////////////////////////////////////////////////////////////////////////

std::unique_ptr<Wt::WApplication> create_application(const Wt::WEnvironment& env)
{
  return std::make_unique<ApplicationMap>(env);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// main
/////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{
  std::cout << "Loading data files..." << std::endl;

  if (load_geojson() < 0)
  {
  }

  if (load_dc311_simple() < 0)
  {
  }

  return Wt::WRun(argc, argv, &create_application);
}
