#ifndef SERVICE_REQUEST_HH
#define SERVICE_REQUEST_HH

#include <string>

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Coordinate
/////////////////////////////////////////////////////////////////////////////////////////////////////

struct Coordinate
{
  std::string latitude;
  std::string longitude;

  Coordinate() = default;
  Coordinate(const std::string& lat, const std::string& lon)
    : latitude(lat), longitude(lon) {
  }
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ServiceRequest - Dbo mapping class using CSV field names
// CSV Header: X,Y,SERVICEREQUESTID,STREETADDRESS,CITY,STATE,ZIPCODE,WARD,
//             SERVICECODE,SERVICECODEDESCRIPTION,SERVICETYPECODEDESCRIPTION,
//             ORGANIZATIONACRONYM,SERVICECALLCOUNT,ADDDATE,RESOLUTIONDATE,
//             SERVICEDUEDATE,SERVICEORDERDATE,STATUS_CODE,SERVICEORDERSTATUS,
//             INSPECTIONFLAG,INSPECTIONDATE,INSPECTORNAME,PRIORITY,DETAILS,
//             XCOORD,YCOORD,LATITUDE,LONGITUDE,MARADDRESSREPOSITORYID,GIS_ID,
//             GLOBALID,CREATED,EDITED,GDB_FROM_DATE,GDB_TO_DATE,GDB_ARCHIVE_OID,
//             SE_ANNO_CAD_DATA,OBJECTID
/////////////////////////////////////////////////////////////////////////////////////////////////////

class ServiceRequest
{
public:

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 0-1: Coordinate fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string X;
  std::string Y;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 2: Service request identification
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string SERVICEREQUESTID;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 3-7: Address information
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string STREETADDRESS;
  std::string CITY;
  std::string STATE;
  std::string ZIPCODE;
  std::string WARD;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 8-12: Service information
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string SERVICECODE;
  std::string SERVICECODEDESCRIPTION;
  std::string SERVICETYPECODEDESCRIPTION;
  std::string ORGANIZATIONACRONYM;
  std::string SERVICECALLCOUNT;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 13-16: Date fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string ADDDATE;
  std::string RESOLUTIONDATE;
  std::string SERVICEDUEDATE;
  std::string SERVICEORDERDATE;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 17-18: Status fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string STATUS_CODE;
  std::string SERVICEORDERSTATUS;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 19-21: Inspection fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string INSPECTIONFLAG;
  std::string INSPECTIONDATE;
  std::string INSPECTORNAME;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 22-23: Additional fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string PRIORITY;
  std::string DETAILS;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 24-27: Additional coordinate fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string XCOORD;
  std::string YCOORD;
  std::string LATITUDE;
  std::string LONGITUDE;

  /////////////////////////////////////////////////////////////////////////////////////////////////////
  // 28-37: System fields
  /////////////////////////////////////////////////////////////////////////////////////////////////////

  std::string MARADDRESSREPOSITORYID;
  std::string GIS_ID;
  std::string GLOBALID;
  std::string CREATED;
  std::string EDITED;
  std::string GDB_FROM_DATE;
  std::string GDB_TO_DATE;
  std::string GDB_ARCHIVE_OID;
  std::string SE_ANNO_CAD_DATA;
  std::string OBJECTID;

};

#endif
