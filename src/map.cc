#include <Wt/WApplication.h>
#include <Wt/WContainerWidget.h>
#include <WMapbox.hh>

#include <fstream>
#include <sstream>
#include <vector>
#include <string>
#include <iostream>

int read_csv(const std::string& path);

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

class ApplicationMap : public Wt::WApplication
{
public:
  ApplicationMap(const Wt::WEnvironment& env);
  virtual ~ApplicationMap();
};

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

ApplicationMap::ApplicationMap(const Wt::WEnvironment& env)
  : WApplication(env)
{
  Wt::WMapbox* map = root()->addWidget(std::make_unique<Wt::WMapbox>());
  map->resize(1920, 1080);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// ~ApplicationMap
/////////////////////////////////////////////////////////////////////////////////////////////////////

ApplicationMap::~ApplicationMap()
{
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// create_application
/////////////////////////////////////////////////////////////////////////////////////////////////////

std::unique_ptr<Wt::WApplication> create_application(const Wt::WEnvironment& env)
{
  return std::make_unique<ApplicationMap>(env);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// main
/////////////////////////////////////////////////////////////////////////////////////////////////////

int main(int argc, char* argv[])
{
  if (read_csv("dc_311-2016.csv.s0311.csv") < 0)
  {

  }


  return Wt::WRun(argc, argv, &create_application);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////
// read_csv
/////////////////////////////////////////////////////////////////////////////////////////////////////

int read_csv(const std::string& path)
{
  std::ifstream file(path);
  if (!file.is_open())
  {
    return -1;
  }

  std::string line;
  int nbr_lines = 0;
  while (std::getline(file, line))
  {
    nbr_lines++;
  }

  file.close();

  return nbr_lines;
}